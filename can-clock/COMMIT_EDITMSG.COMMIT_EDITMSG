

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
diff --git a/can-clock/Settings.h b/can-clock/Settings.h
index a7b3ddf..c3f4b94 100644
--- a/can-clock/Settings.h
+++ b/can-clock/Settings.h
@@ -28,8 +28,6 @@
 #define HU_CHINESE_WITH_CAN_SIMPLE 3
 #define HU_CHINESE_WITH_CAN_EXTENDED 4
 
-bool isConfigured = false;
-
 typedef struct __attribute__((__packed__)) {
   uint8_t configVersion;
   uint8_t huType;
@@ -60,6 +58,8 @@ Settings currentSettings = {
 
 WebUSB WebUSBSerial(255, "https://p1ne.github.io/fdim-controller/fdim-config/");
 
+//WebUSB WebUSBSerial(255, "http://localhost:8080/fdim-config/");
+
 void readSettings() {
   if (EEPROM.read(CONFIG_START + 0) == CONFIG_VERSION)
    for (unsigned int t=0; t<sizeof(currentSettings); t++)
@@ -69,8 +69,6 @@ void readSettings() {
 void saveSettings() {
   for (unsigned int t=0; t<sizeof(currentSettings); t++)
    EEPROM.write(CONFIG_START + t, *((char*)&currentSettings + t));
-
-  isConfigured = true;
 }
 
 boolean wantClock() {
@@ -81,8 +79,11 @@ boolean wantClock() {
 
 void printParam(int8_t param) {
   WebUSBSerial.print(char(param));
+
+#if defined (WEBUSB_DEBUG)
   Serial.print(char(param), HEX);
-//  WebUSBSerial.print(F("|"));
+  Serial.print("|");
+#endif
 }
 
 void printCurrentRTCTime()
@@ -97,8 +98,8 @@ void printCurrentRTCTime()
     }
   }
 
-  printParam(uint8_t(32));
-  printParam(uint8_t(64));
+  printParam(uint8_t(0));
+  printParam(uint8_t(0));
 }
 
 void saveRTCTime(uint8_t hour, uint8_t minute) {
@@ -113,27 +114,27 @@ void printCurrentSettings() {
   printParam(uint8_t(currentSettings.huType));
   printParam(uint8_t(currentSettings.unitsMetric));
   printParam(uint8_t(currentSettings.useRTC));
-  printCurrentRTCTime();
   printParam(uint8_t(currentSettings.tz));
   printParam(uint8_t(currentSettings.tzPositive));
   printParam(uint8_t(currentSettings.clockMode));
   printParam(uint8_t(currentSettings.tpmsDisplay));
   printParam(uint8_t(currentSettings.tpmsRequest));
+  printCurrentRTCTime();
   WebUSBSerial.flush();
 }
 
-void saveReceivedSettings(String settingsString) {
-  currentSettings.configVersion = uint8_t(settingsString.c_str()[0]);
-  currentSettings.huType = uint8_t(settingsString.c_str()[1]);
-  currentSettings.unitsMetric = bool(settingsString.c_str()[2]);
-  currentSettings.useRTC = bool(settingsString.c_str()[3]);
-  saveRTCTime(uint8_t(settingsString.c_str()[4]), uint8_t(settingsString.c_str()[5]));
-  currentSettings.tz = uint8_t(settingsString.c_str()[6]);
-  currentSettings.tzPositive = bool(settingsString.c_str()[7]);
-  currentSettings.clockMode = uint8_t(settingsString.c_str()[8]);
-  currentSettings.tpmsDisplay = uint8_t(settingsString.c_str()[9]);
-  currentSettings.tpmsRequest = bool(settingsString.c_str()[10]);
-
+void saveReceivedSettings(byte settingsString[], byte length) {
+  currentSettings.configVersion = uint8_t(settingsString[1]);
+  currentSettings.huType = uint8_t(settingsString[2]);
+  currentSettings.unitsMetric = bool(settingsString[3]);
+  currentSettings.useRTC = bool(settingsString[4]);
+  currentSettings.tz = uint8_t(settingsString[5]);
+  currentSettings.tzPositive = bool(settingsString[6]);
+  currentSettings.clockMode = uint8_t(settingsString[7]);
+  currentSettings.tpmsDisplay = uint8_t(settingsString[8]);
+  currentSettings.tpmsRequest = bool(settingsString[9]);
+  saveRTCTime(uint8_t(settingsString[10]), uint8_t(settingsString[11]));
+  printCurrentSettings();
   saveSettings();
 }
 
diff --git a/can-clock/can-clock.ino b/can-clock/can-clock.ino
index 22ea38b..418d02f 100644
--- a/can-clock/can-clock.ino
+++ b/can-clock/can-clock.ino
@@ -16,10 +16,12 @@
 #include "Settings.h"
 
 #undef DEBUG
+#undef WEBUSB_DEBUG
+
 #undef MQ135_CONNECTED
 
-String SAVE_MSG = "S";
-String LOAD_MSG = "L\n";
+char SAVE_MSG = 'S';
+char LOAD_MSG = 'L';
 
 const uint8_t TIMER_STEP = 25;
 const uint8_t SPI_CS_PIN = 10;
@@ -50,7 +52,8 @@ uint8_t currentText = 0;
 
 uint8_t currentTpmsRequest = TPMS_INIT;
 
-String inSerialData = "";
+byte inSerialData[256];
+byte dataIdx = 0;
 
 MCP_CAN CAN(SPI_CS_PIN);
 
@@ -196,29 +199,22 @@ void detachCAN()
 void webUSBConfiguration() {
   while (WebUSBSerial.available() > 0) {
     byte recieved = WebUSBSerial.read();
-    inSerialData += char(recieved);
+    inSerialData[dataIdx] = recieved;
+    dataIdx++;
 
-    if (recieved == '\n') {
-      String message = inSerialData;
-      inSerialData = F("");
-#ifdef DEBUG
-      Serial.println(message);
-#endif
-      if (message == LOAD_MSG) {
+    if (char(recieved) == '\n') {
+      if (inSerialData[0] == LOAD_MSG) {
         printCurrentSettings();
       }
-      if (message.startsWith(SAVE_MSG)) {
-#ifdef DEBUG
-        Serial.println(message);
-        Serial.println(message.length());
-        for (unsigned int i=0;i<message.length();i++) {
-          Serial.println(message.charAt(i), HEX);
+      if (inSerialData[0] == SAVE_MSG) {
+#ifdef WEBUSB_DEBUG
+        for (unsigned int i=0;i<dataIdx;i++) {
+          Serial.println(inSerialData[i], HEX);
         }
 #endif
-        String receivedSettings;
-        receivedSettings = message.substring(SAVE_MSG.length());
-        saveReceivedSettings(receivedSettings);
+        saveReceivedSettings(inSerialData, dataIdx);
       }
+      dataIdx = 0;
     }
   }
 }
@@ -256,7 +252,7 @@ void setup() {
       tirePressure[i] = F("   ");
   }
 
-#if defined (DEBUG)
+#if defined (WEBUSB_DEBUG)
     delay(5000);
     printCurrentSettings();
 #endif
@@ -266,6 +262,8 @@ START_INIT:
     webUSBConfiguration();
     delay(100);
     goto START_INIT;
+  } else {
+    Serial.println("CAN OK");
   }
 
   attachCAN();
@@ -302,7 +300,6 @@ START_INIT:
 
   timer = 0;
   delay(500);
-
   //CAN.sendMsgBuf(metric.header, 0, metric.len, metric.data);
 }
 
@@ -385,10 +382,12 @@ void loop() {
     }
   }
 
-#if defined (DEBUG)
+#if defined (DEBUG) || defined(WEBUSB_DEBUG)
   sendingNow = true;
 #endif
 
+  webUSBConfiguration();
+
   if (sendingNow) {
 
     if (currentSettings.useRTC && (currentSettings.clockMode != CLOCK_HIDE)) {
@@ -430,8 +429,6 @@ void loop() {
       printDebug(timer, tpms[currentTpmsRequest]);
     }
 
-    webUSBConfiguration();
-
     if ( ( (timer >= text[currentText].started ) || (!firstCycle) ) && ((timer % text[currentText].repeated) - text[currentText].delayed) == 0) {
       if (currentText == 0) {
         switch (currentSettings.huType) {
diff --git a/fdim-config/fdim.js b/fdim-config/fdim.js
index 89b5449..2524336 100644
--- a/fdim-config/fdim.js
+++ b/fdim-config/fdim.js
@@ -55,47 +55,21 @@
       });
     }
 
-    function constructRawConfigString() {
-      let rtcClockArr;
-      if (rtcClock.value != "") {
-        rtcClockArr = rtcClock.value.split(":");
-      } else {
-        rtcClockArr = [0x20, 0x40];
-      }
-      let configVersionValue = (parseInt(configVersion.innerText, 10) > 7) ? parseInt(configVersion.innerText, 10) : 7;
-
-      let currentRawConfig = String.fromCharCode(configVersionValue) +
-      String.fromCharCode(parseInt(huType.value, 10)) +
-      String.fromCharCode(parseInt(unitsMetric.value, 10)) +
-      String.fromCharCode(parseInt(useRTC.value, 10)) +
-      String.fromCharCode(parseInt(rtcClockArr[0], 10)) +
-      String.fromCharCode(parseInt(rtcClockArr[1], 10)) +
-      String.fromCharCode(parseInt(Math.abs(timeZone.value, 10))) +
-      String.fromCharCode(parseInt(timeZone.value, 10) > 0 ? 1 : 0) +
-      String.fromCharCode(parseInt(clockMode.value, 10)) +
-      String.fromCharCode(parseInt(tpmsDisplay.value, 10)) +
-      String.fromCharCode(parseInt(tpmsMode.value, 10));
-
-      printConfigString.innerText = hexEncode(currentRawConfig);
-
-      return(currentRawConfig)
-    };
-
     function parseConfigString(configString) {
       configVersion.innerText = configString.charCodeAt(0);
       huType.value = configString.charCodeAt(1);
       unitsMetric.value = configString.charCodeAt(2);
       useRTC.value = configString.charCodeAt(3);
-      if ((configString.charCodeAt(4) == 0x20) && (configString.charCodeAt(5) == 0x40)) {
+      timeZone.value = parseInt(configString.charCodeAt(4), 10);
+      timeZone.value = parseInt(timeZone.value, 10) * ((parseInt(configString.charCodeAt(5), 10) > 0) ? 1 : -1);
+      clockMode.value = configString.charCodeAt(6);
+      tpmsDisplay.value = configString.charCodeAt(7);
+      tpmsMode.value = configString.charCodeAt(8);
+      if (configString.charCodeAt(3)) {
         rtcClock.value = "";
       } else {
-        rtcClock.value = configString.charCodeAt(4) + ":" + configString.charCodeAt(5);
+        rtcClock.value = configString.charCodeAt(9) + ":" + configString.charCodeAt(10);
       }
-      timeZone.value = parseInt(configString.charCodeAt(6), 10);
-      timeZone.value = parseInt(timeZone.value, 10) * ((parseInt(configString.charCodeAt(7), 10) > 0) ? 1 : -1);
-      clockMode.value = configString.charCodeAt(8);
-      tpmsDisplay.value = configString.charCodeAt(9);
-      tpmsMode.value = configString.charCodeAt(10);
     };
 
     function onReadConfig() {
@@ -116,22 +90,50 @@
         return;
       }
       
-      let toSend = "S" + constructRawConfigString() + "\n";
-
-      var i;
-      let view = new Uint8Array(toSend.length);
-      for (i = 0; i < toSend.length; i++) {
-        view[i] = parseInt(toSend.charCodeAt(i), 10);
+      var rtcClockArr = [];
+      if (rtcClock.value != "") {
+        rtcClockArr = rtcClock.value.split(":");
+      } else {
+        rtcClockArr[0] = 0;
+        rtcClockArr[1] = 0;
       }
-      port.send(view);
+      let configVersionValue = (parseInt(configVersion.innerText, 10) > 7) ? parseInt(configVersion.innerText, 10) : 7;
+
+      let view = new Uint8Array(13);
+
+      let i = 0;
+
+      view[i++] = parseInt("S".charCodeAt("0"), 10);
+      view[i++] = configVersionValue
+      view[i++] = parseInt(huType.value, 10);
+      view[i++] = parseInt(unitsMetric.value, 10);
+      view[i++] = parseInt(useRTC.value, 10);
+      view[i++] = parseInt(Math.abs(timeZone.value, 10));
+      view[i++] = parseInt(timeZone.value, 10) > 0 ? 1 : 0;
+      view[i++] = parseInt(clockMode.value, 10);
+      view[i++] = parseInt(tpmsDisplay.value, 10);
+      view[i++] = parseInt(tpmsMode.value, 10);
+      view[i++] = parseInt(rtcClockArr[0], 10);
+      view[i++] = parseInt(rtcClockArr[1], 10);
+      view[i++] = parseInt("\n".charCodeAt(0), 10);
+
+      //printConfigString.innerText = hexEncode(currentRawConfig);
+
+      //var i;
+      //let view = new Uint8Array(13);
+      //for (i = 0; i < toSend.length; i++) {
+      //  view[i] = parseInt(toSend.charCodeAt(i), 10);
+      //}
+
+      //port.send(view);
+
+      var j;
+      let send = new Uint8Array(1);
+      for (j = 0; j < i; j++) {
+        send[0] = view[j];
+        port.send(send);
 
-/*      var i;
-      let view = new Uint8Array(1);
-      for (i = 0; i < toSend.length; i++) {
-        view[0] = parseInt(toSend.charCodeAt(i), 10);
-        port.send(view);
       }
-*/
     };
 
     function onGetCurrentTime(control) {
diff --git a/fdim-config/serial.js b/fdim-config/serial.js
index 744d235..588b19c 100644
--- a/fdim-config/serial.js
+++ b/fdim-config/serial.js
@@ -12,6 +12,7 @@ var serial = {};
   serial.requestPort = function() {
     const filters = [
       { 'vendorId': 0x1b4f, 'productId': 0x9203 }, // ProMicro
+      { 'vendorId': 0x1b4f, 'productId': 0x9206 }, // ProMicro
 
     ];
     return navigator.usb.requestDevice({ 'filters': filters }).then(